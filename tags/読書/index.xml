<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>読書 on log </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://log.deprode.net/tags/%E8%AA%AD%E6%9B%B8/index.xml</link>
    
    
    <copyright>deprode</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>「新しい文章力の教室」読み終えた</title>
      <link>http://log.deprode.net/logs/2016-04-22_22-27-04/</link>
      <pubDate>Fri, 22 Apr 2016 22:27:04 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-04-22_22-27-04/</guid>
      <description>

&lt;h2 id=&#34;新しい文章力の教室-読み終えた&#34;&gt;「新しい文章力の教室」読み終えた&lt;/h2&gt;

&lt;p&gt;ある日Webサイトに載せる文章をもらったのだが、句読点が一切なかった。こちらで推敲しようにも推敲する技術がない。ならば習得するしかない。そういった経緯で、新しい文章力の教室を買ったのだった。&lt;/p&gt;

&lt;p&gt;本書では書ける人が自然とやっているテクニックが77項目にわたって書いてある。個人的に自信がなかった&amp;rdquo;文頭一語目の読点&amp;rdquo;や、&amp;rdquo;といった&amp;rdquo;・&amp;rdquo;など&amp;rdquo;という濁し言葉をどう扱うのかがわかった。&lt;/p&gt;

&lt;p&gt;おそらく文章を日常的に書いている人であれば、半分くらいの項目は自然と実行しているだろう。しかし全てを実行できている人は少ない。私も係り受けに関連する項目は全くわかっていなかったし、感想文における感想の引き出し方も知らなかった。この本を読んだことで他人の文章と差がつく、あるいは他人と同じくらいの文章が書けるようになる。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;本書は文章を&amp;rdquo;事実&amp;rdquo;、&amp;rdquo;ロジック&amp;rdquo;、&amp;rdquo;言葉づかい&amp;rdquo;の3つのレイヤーにわけて考えている。しかしテクニックの半分以上は言葉づかいを磨くものなので、ロジックを考えたい人には「数学文章読本」や「考える技術・書く技術」を推しておく。&lt;/p&gt;

&lt;p&gt;なおWebサイトの文章はうまく直った……といいたいところだが、本書が届いたときにはすでにレイアウトが決まっており、ほとんど直せない状態だった。次からちゃんと直す。&lt;/p&gt;

&lt;p&gt;公式： &lt;a href=&#34;http://book.impress.co.jp/books/1114101132&#34;&gt;新しい文章力の教室 苦手を得意に変えるナタリー式トレーニング（できるビジネス） - インプレスブックス&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;（かもしれない。）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>「オブジェクト指向JavaScriptの原則」を読み終えた</title>
      <link>http://log.deprode.net/logs/2016-04-15_19-57-19/</link>
      <pubDate>Fri, 15 Apr 2016 19:57:19 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-04-15_19-57-19/</guid>
      <description>

&lt;h2 id=&#34;オブジェクト指向javascriptの原則-を読み終えた&#34;&gt;「オブジェクト指向JavaScriptの原則」を読み終えた&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;本書はJavaScriptが持つオブジェクト指向的な言語特性や、その特性を強力にサポートするECMAScript 5の機能を紹介し、それらの特性や機能を活かすプログラミングの方法、考え方、パターンについて、深くそして簡潔に解説する書籍です。&lt;br /&gt;
&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873116815/&#34;&gt;O&amp;rsquo;Reilly Japan - オブジェクト指向JavaScriptの原則&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ECMAScript2015（ES2015）を使っていろいろ使用と思ったのだが、その前にECMAScript 5（ES5）をよく知らなかったので学ぼうと思った。追加されたのはいくつかあるが、主に4つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;オブジェクトやオブジェクト関連の新たなAPI&lt;/li&gt;
&lt;li&gt;配列操作メソッド&lt;/li&gt;
&lt;li&gt;Strictモード&lt;/li&gt;
&lt;li&gt;JSONサポート&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち、オブジェクト関連がよくわからなかったので本書を購入した。ES5のオブジェクトの仕組みや、コンストラクタ、プロトタイプ、継承などを学ぶことができた。が、構文が複雑なので半年経ったらメンテ不可能になりそう。結果的にJavaScriptはオブジェクト指向向いてないのでは、という気分になった。&lt;/p&gt;

&lt;p&gt;だが、ES2015にはclass構文が追加されている。これを使えば覚えるのが面倒で複雑な宣言を書かなくてもいい、というメリットはあるのだが、実際にclassからbabelを使ったあとのコードを見たり、ES2015以前の古いコードを見たときに何をやっているかわかるので、本書に書いてあることは有益だった。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;a href=&#34;http://es6-features.org/&#34;&gt;es6-features.org&lt;/a&gt;というサイトでは、ES5と書き方を比較できるのだが、&lt;a href=&#34;http://es6-features.org/#ClassDefinition&#34;&gt;classも比較できる&lt;/a&gt;ため、どれくらい複雑な書き方が単純化されたか見てとれる。&lt;/p&gt;

&lt;p&gt;本書は2014年の本だが、2年でここまで変わるJavaScript界隈ついてくのが大変そうだと感じた。書き方は楽になっているのでいいが、いろいろできるようになると選択が難しい。&lt;/p&gt;

&lt;p&gt;余談だが、&lt;a href=&#34;http://node.green/&#34;&gt;node.green&lt;/a&gt;でES2015がnodeでサポートされているか見ることができるのだが、v5.10.1まであげて&amp;ndash;es_stagingフラグをつければclass構文が使えるし、babelを使う手もある。&lt;/p&gt;

&lt;p&gt;公式：&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873116815/&#34;&gt;O&amp;rsquo;Reilly Japan - オブジェクト指向JavaScriptの原則&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016 03 10</title>
      <link>http://log.deprode.net/logs/2016-03-10/</link>
      <pubDate>Thu, 10 Mar 2016 21:41:25 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-03-10/</guid>
      <description>

&lt;h2 id=&#34;今日からはじめる情報設計-を読んだ&#34;&gt;「今日からはじめる情報設計」を読んだ&lt;/h2&gt;

&lt;p&gt;「インフォメーション・アーキテクトの第一人者による、「しっちゃかめっちゃか」への処方箋」らしく、Webサイトを作るにあたり必要になると思ったので購入した。&lt;/p&gt;

&lt;p&gt;思っていたような本ではなかった。もっと汎用的な、問題を整理して解決するための本だった。&lt;/p&gt;

&lt;p&gt;問題を解決するための情報設計の方法。すなわち、状況を知り、真意を表明し、情報を整理し、用語を統一し方向を決め、達成項目を決め、達成度をはかり、情報を分類し、他者とのすべてを調整する、そのための指針があり、やり方も書いてある。&lt;/p&gt;

&lt;p&gt;難があるとすれば、本書はどこから読んでもいいように作ってあるため、フローが見えてこなかった。一つ一つのページに書いてあることはまともで、役に立つと思うのだが、書いてあることを実践する際にどのようにすればいいのか、自信を持ってやることはできないだろう。&lt;/p&gt;

&lt;p&gt;具体的なフロー（進め方）はIAシンキングなどを読めば補完できるはず。読み終えたあと、たまにぱらぱらめくることで何か発見がある、そういう類いの本だと感じた。&lt;/p&gt;

&lt;p&gt;公式：&lt;a href=&#34;http://www.bnn.co.jp/books/7884/&#34;&gt;今日からはじめる情報設計　センスメイキングするための7ステップ | 株式会社ビー・エヌ・エヌ新社&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;余談だが、個人的に読みづらいと思った訳があった。&lt;/p&gt;

&lt;p&gt;文章に接続詞がないため、著者の言いたいことがはっきりしないところがあり、行間を読みながら読み進めないと理解できなかった。また、1つのトピックが1ページに収まるように構成されているためか、やたらと代名詞が多く出てきている。そのため、どのことを指しているのかわからなくなることが多かった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016 03 09</title>
      <link>http://log.deprode.net/logs/2016-03-09/</link>
      <pubDate>Wed, 09 Mar 2016 22:13:47 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-03-09/</guid>
      <description>

&lt;h2 id=&#34;html5-css3モダンコーディング-を読み終えた&#34;&gt;「HTML5/CSS3モダンコーディング」を読み終えた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://yoshiko-pg.github.io/slides/20151215-scripty/&#34;&gt;まだ中央寄せで消耗してるの？ - @yoshiko_pg&lt;/a&gt;のスライドで知り、その後Webサイトを作ることになったので不安解消のために購入した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shoeisha.co.jp/book/detail/9784798142203&#34;&gt;HTML5&amp;amp;CSS3標準デザイン講座&lt;/a&gt;と迷ったのだが、HTML/CSSはある程度知っていた。そのため、より発展的な内容を学べる本を選んだ。結果的にはこの選択は功を奏した。&lt;/p&gt;

&lt;p&gt;本書は、「スタンダードレイアウト」「グリッドレイアウト」「シングルページレイアウト」の3つのWebサイトを作成しながらHTML5/CSS3を学んでいく。初心者向けの本にあるようなデザインは、比較的難しいことをしないためか、あまりイケてない。そして、そこからブラッシュアップする方法もわからない。だが、本書のデザインはそういった本と比較してイケてるので、モチベーションも上がり、最後まで実際にコーディングすることができた。&lt;/p&gt;

&lt;p&gt;惜しいと思った点もある。tipsがほんのあちこちに散らばっているのだが、目次や索引には書かれていない。逆引き辞書のように使う本ではないのだが、覚えておきたいtipsもかなりある。なので、読み直すときに索引や目次がほしかった。&lt;/p&gt;

&lt;p&gt;惜しい点はあるが、全体的に良本だった。かっこいいサイトで目にするコンポーネントをどう実装したらベターなのか、という疑問に答えてくれる本。&lt;/p&gt;

&lt;h4 id=&#34;公式&#34;&gt;公式&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shoeisha.co.jp/book/detail/9784798141572&#34;&gt;HTML5/CSS3モダンコーディング フロントエンドエンジニアが教える3つの本格レイアウト スタンダード・グリッド・シングルページレイアウトの作り方（吉田真麻） ｜ 翔泳社の本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016 02 20</title>
      <link>http://log.deprode.net/logs/2016-02-20/</link>
      <pubDate>Sat, 20 Feb 2016 17:08:30 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-02-20/</guid>
      <description>

&lt;h2 id=&#34;sql実践入門-を読み終えた&#34;&gt;「SQL実践入門」を読み終えた&lt;/h2&gt;

&lt;p&gt;良本。&lt;/p&gt;

&lt;p&gt;SQLの基本的なことは知ってるが、実際に仕事で使う際、どう書くのがベターなのかわからなかったので購入した。&lt;/p&gt;

&lt;p&gt;サブタイトルにもあるように、高速でわかりやすいSQLを書くための本。大量のデータを処理する際に、どのように記述すれば高速でパフォーマンスのいいSQLを書けるのか、同じ結果になるのにどうして自分のSQLが低速なのかがわかる。&lt;/p&gt;

&lt;p&gt;本書は、第3章からCASE式をWHEREの代わりに使っているなど基本的なことは理解していることを前提としているため、初心者向けではない。初学者〜中級者向け。初心者は&lt;a href=&#34;http://www.shoeisha.co.jp/book/detail/9784798118819&#34;&gt;キリン本&lt;/a&gt;や&lt;a href=&#34;http://www.shoeisha.co.jp/book/detail/9784798135168&#34;&gt;おうちで学べるデータベースのきほん&lt;/a&gt;など初心者向けの本を読んだ方がいい。&lt;/p&gt;

&lt;p&gt;個人的には、結合の章がよかった。クロス結合を知らなかったので、クロス結合から内部結合、外部結合へと進んでいく説明はわかりやすかった。内部結合でベン図のようなものを想像していたが、すぐに説明図が出てきたので勘違いせずにすんだ。&lt;/p&gt;

&lt;p&gt;また、ぐるぐる系とそれ以外のやり方が比較されており、参考になった。個人的に大量のデータを扱わないのでぐるぐる系でやっていたが、ガツン系の方がいいのだろうと単純に考えていた。しかし、それぞれに利点と欠点があり、適切な方を選ぶ必要があるのだとわかった。&lt;/p&gt;

&lt;p&gt;この本では唯一、入れ子集合モデルのあたりがわからなかった。これは、たぶん私の頭がよくないか、入れ子集合モデルの作り方やアルゴリズムを調べなかったせいだと思う。SQLではなく、ほかの部分に気が散って理解できなかった。&lt;/p&gt;

&lt;p&gt;ともあれ、ほかの部分に関しては理解できたし、演習問題もなんとかできたのでよかった。今後も「ベターなSQLを書きたいが迷っているとき」にちょくちょく参考にできそうなので、買ってよかった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この本とは関係ないが、COALESCE（コアレス）関数の読み方が未だに覚えられない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016 01 13</title>
      <link>http://log.deprode.net/logs/2016-01-13/</link>
      <pubDate>Wed, 13 Jan 2016 17:28:48 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-01-13/</guid>
      <description>

&lt;h2 id=&#34;メンタルが強い人がやめた13の習慣-を読み終えた&#34;&gt;「メンタルが強い人がやめた13の習慣」を読み終えた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amymorinlcsw.com/mentally-strong-people/&#34;&gt;13 Things Mentally Strong People Don&amp;rsquo;t Do - Amy Morin, LCSW&lt;/a&gt;、100万人以上に読まれた人気記事の書籍版。多くの人がついやってしまう心の癖をやめることで人生を上向きにするため、メンタルヘルスやポジティブシンキングとは違う技術を身につけるための本。&lt;/p&gt;

&lt;p&gt;以下、Amazonから「13の習慣」を引用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;01「自分を哀れむ習慣」をやめる
02「自分の力を手放す習慣」をやめる
03「現状維持の習慣」をやめる
04「どうにもならないことで悩む習慣」をやめる
05「みんなにいい顔をする習慣」をやめる
06「リスクを撮らない習慣」をやめる
07「過去を引きずる習慣」をやめる
08「同じ過ちを繰り返す習慣」をやめる
09「人の成功に嫉妬する習慣」をやめる
10「一度の失敗でくじける習慣」をやめる
11「孤独を恐れる習慣」をやめる
12「自分は特別だと思う習慣」をやめる
13「すぐに結果を求める習慣」をやめる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;論理的・合理的に考えることで、習慣を根ざさないために対策をとっていく。&lt;/p&gt;

&lt;p&gt;読み終えたときの印象はかなり悪かった。というのも、2週間くらい別のことをやっていたので、0章に書いてある次のことを忘れていたからだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13のやめるべき習慣は、読者の皆さんに「〜してますか？」「してませんか？」と尋ねるチェックリストのつもりで書いたのではない。誰もが時折はまり込んでしまうありふれた思考習慣について、詳しく書いたつもりだ。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この本に書いてあることは、論理的であり、合理的であり、正論だ。なので、上記のことを忘れていると、正しさの押しつけに聞こえてしまう。ユーモアがないため、よけいに「口うるさいが自分では守らない親」の言っていることに聞こえてしまう。&lt;/p&gt;

&lt;p&gt;著者ですら、この習慣にはまっていた。だからこそ、ここから抜け出すために強い気持ちでこれらの習慣をやめた。全部をいっぺんにやめることは不可能だが、少しずつ&amp;rdquo;しない&amp;rdquo;ことを選ぶことはできる。そうして、自身の感情に振り回されない、合理的な判断ができるようになっていく。&lt;/p&gt;

&lt;p&gt;ただ、読んでいる途中で、メンタルが強くなることは「痛みに対して鈍くなること」とはにもつながるのでは、とも感じた。強くなれば自分への痛みを感じにくくなるためいろいろなことができる反面、他人の痛みを察する力が弱くなる。それはいやだな、と思った。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 12 27</title>
      <link>http://log.deprode.net/logs/2015-12-27/</link>
      <pubDate>Sun, 27 Dec 2015 23:34:12 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-12-27/</guid>
      <description>

&lt;h2 id=&#34;docker実践入門を読み終えた&#34;&gt;Docker実践入門を読み終えた&lt;/h2&gt;

&lt;p&gt;公式サイト：&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7654-3&#34;&gt;Docker実践入門――Linuxコンテナ技術の基礎から応用まで：書籍案内｜技術評論社&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2014年のバズワードになったDockerを始める人のための入門書。Dockerを使うと開発環境はどうなるのかといった理論から始まり、実際にDockerコンテナを起動させ、そして実際にできること一覧を確認するという王道を行く入門書だった。とりあえずDocker使ってみたい人におすすめ。&lt;/p&gt;

&lt;p&gt;第4章ではDockerの内部構造を解説しており、dm-thinを用いたイメージ管理などの深い話も書かれている。&lt;/p&gt;

&lt;p&gt;全180ページ。あっさり読める割に、Dockerの逆引き辞書的にも使える第三章があるため、手元に置いておけば使う頻度も増えると思う。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この本を買ったのは、自前の仮想開発環境をVagrantからDockerにしたいため、またVPSをDockerで動かそうと思っていたためだった。VPSの方は無理して変える必要はないのかもしれないが、VagrantはDockerにした方が便利そうだった。&lt;/p&gt;

&lt;p&gt;今までだと、php+mysqlでbrowser-syncやら何やら入れて、その後「何やら」で何をしたのかわからなくなっていた。なので、普通にVagrantfile（と起動スクリプト）から再現できない。dockerならシンプルな構成にすることができるし、commit履歴を追うことでインフラへの変更がわかると思った。&lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;Docker Hub&lt;/a&gt;でphpのコンテナも配布されている。&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;mysql&lt;/a&gt;も&lt;a href=&#34;https://hub.docker.com/_/postgres/&#34;&gt;postgre&lt;/a&gt;もある。ここから&lt;code&gt;docker pull&lt;/code&gt;してくればとりあえず動くコンテナがすぐ手に入る。&lt;/p&gt;

&lt;p&gt;すごい便利だけど、Dockerの流儀的なものがいまいちよくわかってない。1アプリ1コンテナなのはわかるけど、cronどうするのとか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 12 11</title>
      <link>http://log.deprode.net/logs/2015-12-11/</link>
      <pubDate>Fri, 11 Dec 2015 23:24:16 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-12-11/</guid>
      <description>

&lt;h2 id=&#34;開眼-javascriptを読んだ&#34;&gt;開眼！JavaScriptを読んだ&lt;/h2&gt;

&lt;p&gt;読み終えた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oreilly.co.jp/books/9784873116211/&#34;&gt;O&amp;rsquo;Reilly Japan - 開眼！ JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サブタイトルの「言語使用から学ぶJavaScriptの本質」にもあるとおり、JavaScirptで知っておくべきことをまとめている。&lt;/p&gt;

&lt;p&gt;ECMAScript3に準拠しているので、ECMAScript5や6(2015)のことはほぼ書かれていない。use strictやObject.keys、Array.forEach、Array.map、JSONなどは書かれていないが、それ以前の基本的なことを丁寧にまとめているのでとても読みやすい。&lt;/p&gt;

&lt;p&gt;本書にも書かれているが、プログラミング初心者やJavaScript初心者だと難しい部分があるが、JavaScriptのことをよく知っている人（プロトタイプチェーンやクロージャをよく知っている人）には簡単な本だと思う。&lt;/p&gt;

&lt;p&gt;というか、正直、書かれている半分以上のことは知ってた。でも、パーフェクトJavaScriptを読んでしばらくたっていたので、JavaScriptのまとまった知見を2日で知ることが出来たので復習にちょうどよかった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;全然関係ないけど、翻訳がすごい読みやすく、また訳注の知識も作者を超えてるんじゃないのかと思った。&lt;/p&gt;

&lt;p&gt;で、訳者のTwitter見たら「オブジェクト指向JavaScriptの原則」もおすすめされていたので、これも読まなきゃみたいな気持ちになっている。ていうか、訳者同じじゃないか。しかも同じ訳者の「JavaScriptで学ぶ関数型プログラミング」も持ってた。（積ん読してるけど）&lt;/p&gt;

&lt;p&gt;読んだ方がいい本がたまっていく……。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 12 09</title>
      <link>http://log.deprode.net/logs/2015-12-09/</link>
      <pubDate>Wed, 09 Dec 2015 21:15:01 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-12-09/</guid>
      <description>

&lt;h2 id=&#34;要点で学ぶ-デザインの法則150を読み終えた&#34;&gt;要点で学ぶ、デザインの法則150を読み終えた&lt;/h2&gt;

&lt;p&gt;読み終えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bnn.co.jp/books/7821/&#34;&gt;要点で学ぶ、デザインの法則150　Design Rule Index | 株式会社ビー・エヌ・エヌ新社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本書は、デザインの際に使われている法則を、わかりやすく端的に解説しているポケットリファレンスだ。公式サイトでは、デザインの表現の幅を広げたいときやデザインに説得力をつけたいときなどに使えると書いてある。&lt;/p&gt;

&lt;p&gt;本書で解説されているデザインは、Webデザインだけではなく、グラフィックデザイン、工業デザイン、建築デザインなど多岐にわたる。私はデザイナーではないので直接使う機会がない法則もかなりあるのだが、しかし読んでいるだけで楽しめる面白さがある。&lt;/p&gt;

&lt;p&gt;たとえば、ダニング・クルーガー効果などがそうだ。これは、未熟な人々が、自身の能力や技能を実際よりも高く評価する傾向のことだ。最近、何を学んでも自信がなくなってきていたので、こういう法則があったのかと膝を打った。&lt;/p&gt;

&lt;p&gt;そのほかのデザインに関連した心理的な項目は、結構面白かった。フレーミングやサンクコスト効果など、名前は知ってるけどよくわからないものも、わかりやすく解説が書いてあった。&lt;/p&gt;

&lt;p&gt;実は、この前に「Design Rule Index - デザイン、新・100の法則」「Design Rule Index[第2版]― デザイン、新・25+100の法則」が発売されていて、どちらも買いそびれてしまったのだった。&lt;/p&gt;

&lt;p&gt;しかし、ポケット版になったことで、解説が簡潔になってより読みやすくなっており、法則も25増えているので買ってよかったと思っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 12 06</title>
      <link>http://log.deprode.net/logs/2015-12-06/</link>
      <pubDate>Sun, 06 Dec 2015 22:04:47 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-12-06/</guid>
      <description>

&lt;h2 id=&#34;知識ゼロから学ぶソフトウェアテストを読み終えた&#34;&gt;知識ゼロから学ぶソフトウェアテストを読み終えた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.shoeisha.co.jp/book/detail/9784798130606&#34;&gt;知識ゼロから学ぶソフトウェアテスト【改訂版】（高橋寿一） ｜ 翔泳社の本&lt;/a&gt;、2013年12月初版発行。&lt;/p&gt;

&lt;p&gt;米Microsoft、独SAP、日本の電気会社（ソニー）で働いてきた作者がソフトウェアテストについて書いた本。フランク（ユーモラス）な文体で書かれているので読むのが楽だし、そのわりに書かれていることは本質的でよかった。まあ、本質的というか、ぶっちゃけ的というか、現場目線での話が多かったので面白かった。&lt;/p&gt;

&lt;p&gt;カバレッジ率も「100%に固執する人いるけど…」みたいな話はTwitterで定期的に繰り返されるけど、じゃあ実際何%ならいいのかという話は出なくてもやもやしてた。本書には適切な値がないことと、大まかな目安が書かれているので参考になった。&lt;/p&gt;

&lt;p&gt;そのほか、機能テストや非機能テストのやり方だけではなく、実際にテストを運用することや品質管理にも言及されており、また少しだけだが、自動化テストの罠&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;にも言及されていた。実践する際にも使える知識がたくさんあるのがよいと思った。&lt;/p&gt;

&lt;p&gt;この本を読んだところでxUnitやBDDツールの使い方がわかるわけではないが、テスト全般の方法や方針を決めることに役立つのではないかと思う。なので、xUnitなどのツールは使えるが、どれをどのようにテストしたらいいのかわからない人は一読の価値があると思う。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;自動化するとスクリプト作成＋メンテナンスコストがかかるため、中には手動テストを行った方が早いにもかかわらず自動化を行った方がよいと錯覚する罠のこと。Jenkins導入したけどメンテコストがつらかったり、はやいうちに何でもかんでも自動化してテスト作り直すコストがかかったりするやつ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2015 11 20</title>
      <link>http://log.deprode.net/logs/2015-11-20/</link>
      <pubDate>Fri, 20 Nov 2015 16:44:58 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-11-20/</guid>
      <description>

&lt;h2 id=&#34;ほめる技術-を読み終えた&#34;&gt;ほめる技術 を読み終えた&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;コーチングのプロが教える「ほめる」技術&amp;rdquo; を読み終えた。コーチングの技術である「アクノレッジメント」の手法を解説した入門書。ビジネスマン向けに、上司・部下・子供など様々なシーンの応用例が出ている。&lt;/p&gt;

&lt;p&gt;「アクノレッジメント」とは、存在を承認すること。コーチングでは、相手を観察し、認め、ときにほめて、動かす手法のこと。&lt;/p&gt;

&lt;p&gt;hontoで電子書籍が異様に安かったので買ってしまった。が、184ページと薄く簡単に読める割に、コーチングの超入門書として読みやすくわかりやすい本となっていた。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ほめることは難しい。これは、ほめられても、その言葉を否定している自分が一番よくわかっている。人をほめるのは表面的な言葉ではダメで、もっと観察して細かい部分や工夫している箇所をほめて欲しい……と思っていた。&lt;/p&gt;

&lt;p&gt;しかし、人によっては何でもいいからとにかくほめることが重要であったり、むしろ本人はほめないで状況をほめた方がよかったり、ほめる回数が重要だったり、人によってほめられてうれしいポイントが違うことがわかった。&lt;/p&gt;

&lt;p&gt;そのポイントは、タイプによって分けられている。人を支配したがるコントローラー、アイデアを出していくプロモーター、全体を支持していくサポーター、分析してから行動するアナライザーの4つに分けられるらしい。&lt;/p&gt;

&lt;p&gt;本書には、簡易的に分析するためのチェックシートも付属している。私はアナライザータイプだった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本書を読んでいても、あの人がもう少しこうしてくれたらな、という経験が頭をよぎり、なかなか読み進められなかった。だが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;「アクノレッジメントは、いってみれば生き方ですから。二種類のひとしかいないんですよ。すきあらば人のアクノレッジメントをしようと思って生きる人と、いつ自分はアクノレッジメントされるんだろうとずっと待っている人と」
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書かれており、やっぱりこっちから行動を起こした方が関係は気づきやすいようだった。これからは、やっかいな人にもアクノレッジメントしてみようかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.njg.co.jp/book/9784534046215/&#34;&gt;【NJセレクト】コーチングのプロが教える「ほめる」技術 | 日本実業出版社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;余談だが、&lt;a href=&#34;http://test.jp/&#34;&gt;Test.jp（http://test.jp/）&lt;/a&gt;というタイプ分けサイトが本書で紹介されているのだが、アドレスがtest.jpだったのでよくこんなドメイン確保できたな…と感心している。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 11 19</title>
      <link>http://log.deprode.net/logs/2015-11-19/</link>
      <pubDate>Thu, 19 Nov 2015 18:34:31 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-11-19/</guid>
      <description>

&lt;h2 id=&#34;mithril-読み終えた&#34;&gt;Mithril 読み終えた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oreilly.co.jp/books/9784873117447/&#34;&gt;Mithril――最速クライアントサイドMVC&lt;/a&gt; を読み終えた。APIを極限までシンプルに保つことで、覚えやすく軽量で高速なフレームワークを実現した&lt;a href=&#34;http://mithril.js.org/&#34;&gt;Mithril&lt;/a&gt;の入門書。&lt;/p&gt;

&lt;p&gt;JavaScript界隈のフレームワークは移り変わりが激しく、Backbone→Knockout→Ember→Angular→（React）→Reduxと、（これで正しいのかわからないがこんな感じだった気がするが、）毎年流行のフレームワークが変わるので保守するのに困る。かつてCoffeeScriptで設定ファイルとかhubotとか書いたけど全部負債になったので、忘れても思い出しやすく、完全に忘れても覚えやすいフレームワークに手を出そうと思った。&lt;/p&gt;

&lt;p&gt;Mithrilは、メソッドが全部で15個。第2章のTodoは、m/m.mount/m.prop/m.withAttr/m.route/m.requestの6つのメソッドだけで作られている。メソッドも、Rootingを行うm.routerの使い方が複数あるだけで、他のものは簡単に使いこなせる。&lt;/p&gt;

&lt;p&gt;しかし、フレームワークのドキュメントは充実しているが、実際にどうコーディングをするのがベターなのか、README以上のサンプルはどう書くのか、テストはどうするのかなど、包括的な知識がないと不安だったため、本書を購入した。&lt;/p&gt;

&lt;p&gt;本書ではMithrilだけではなく、Bootstrapやmocha、Promise、Typescriptなどの周辺技術を使った解説もある。Mithrilはフレームワークが薄いため、JavaScriptや周辺技術に対する理解が大切だと感じていたため、この辺は助かった。&lt;/p&gt;

&lt;p&gt;書籍のコードを写経しても動かないことがあったのが困ったが、&lt;a href=&#34;https://github.com/oreilly-japan/mithril-book-sample&#34;&gt;作者のサンプルリポジトリ&lt;/a&gt;に最新のコードがあるので、こちらを参考にして動かした。&lt;/p&gt;

&lt;p&gt;Mithrilは、m.moduleをm.mountにするなど多少の変更はあるが、Promiseを徐々にES6のものにする以外は大幅な変更は今後もないだろうし、しばらくはMithrilを中心にやってもそうそう困らないだろうと思う。ので、流し読みだけじゃなくて実際にちょっと使ってみようと思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 11 16</title>
      <link>http://log.deprode.net/logs/2015-11-16/</link>
      <pubDate>Mon, 16 Nov 2015 23:28:51 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-11-16/</guid>
      <description>

&lt;h2 id=&#34;quiet-内向型人間の時代を読み終えた&#34;&gt;Quiet 内向型人間の時代を読み終えた&lt;/h2&gt;

&lt;p&gt;TEDで&lt;a href=&#34;https://www.ted.com/talks/susan_cain_the_power_of_introverts?language=ja&#34;&gt;内向的な人が秘めている力&lt;/a&gt;を見たのはかなり前だった。それから書籍が出版され、たまたま本屋で見かけた。&lt;/p&gt;

&lt;p&gt;本の折り返しには、内向型人間かのテストが書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;グループよりも一対一の会話を好む&lt;/li&gt;
&lt;li&gt;文章の方が自分を表現しやすいことが多い&lt;/li&gt;
&lt;li&gt;一人でいる時間を楽しめる&lt;/li&gt;
&lt;li&gt;周りの人と比べて、他人の財産や名声や地位にそれほど興味がないようだ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど、全13項目が書かれているのだが、ほぼ全てに当てはまった。&lt;/p&gt;

&lt;p&gt;本書は、内向型人間の独自の能力に目を向け、外向型の人間とは違ったよさを引き出すための手引書となっている。訳者のあとがきにもあるように、外向型の人間を理想とする社会で生きる上での居心地の悪さの原因を見極め、自分の能力を伸ばす方法を知り、短所をフォローアップする方法がかいてある。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;日本でも、外向型が有利であることは間違いない。学校でも、地域の行事でも、就職活動でも、SNSでも、外向的であることが有利になる場所はたくさんある。（もちろん、内向的でもいい場所はけっこうあるのだが。）&lt;/p&gt;

&lt;p&gt;思い返すと、外向的でなかったためにかなり損している時期というのがかなりあり、今もそうだ。もしかしたら、生まれる時代を間違えたのではないかと自責の念にかられることもある。&lt;/p&gt;

&lt;p&gt;本書には膨大な心理学実験の記録と、ロールモデルが登場する。そのどれもが内向型人間は別に劣っているわけではなく、外向型とは違う価値があり、それが他人によって見出されていないだけなのだと訴える。&lt;/p&gt;

&lt;p&gt;本書を読んで、内向的な自分にも少しは価値があるのだと思えたし、別に無理して全部変える必要はないのだと思えた。ちょっと気が楽になった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 10 18</title>
      <link>http://log.deprode.net/logs/2015-10-18/</link>
      <pubDate>Sun, 18 Oct 2015 22:09:43 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-10-18/</guid>
      <description>

&lt;h2 id=&#34;がんばりすぎるあなたへ-完璧主義を健全な習慣に変える方法-を読み終えた&#34;&gt;「がんばりすぎるあなたへ 完璧主義を健全な習慣に変える方法」を読み終えた&lt;/h2&gt;

&lt;p&gt;とりあえず、読み終えた。本書は完璧主義で苦しんでいる人に、完璧主義のままで楽になれる方法を教えてくれる本。自分の完璧主義のタイプを分析し、考え方をより健全なものにすることで、完璧主義によくある落とし穴を回避する。&lt;/p&gt;

&lt;p&gt;第一章は完璧主義の分類と、自身の分析が主になっている。完璧主義には、自分で高い基準を設定したり、他人の期待に応えたり、理想的な結果を追求するなどのタイプがある。&lt;/p&gt;

&lt;p&gt;これ自体は何の問題もない特徴なのだが、これらを守ることが目的になっていると、完璧主義の不健全な部分が顔を出す。たとえば、「高い基準を守らなければいけないが、守れない→何をやってもだめだから何をやるにしても自信が持てない」など。&lt;/p&gt;

&lt;p&gt;自分の行動が不健全かどうか、チェックシートを用いて確かめることができる。こうして、自分自身の優れた部分と問題を抱えている部分を確かめることができる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本書を読んでいてわかるのは、著者が完璧主義（とそれに苦しんでいる人）を否定していないことだ。完璧主義が悪いのではなく、目的を達成するための戦略や方法の効果が薄いのが問題なのだ。長時間がんばるだけだったり、昔うまくいった方法をいつまでも使ったり、正しさのために莫大なコストをかけたりして、結果的に目標を達成していないのなら、もっと効果のある戦略に変えましょうということだ。&lt;/p&gt;

&lt;p&gt;第二部からは、効果がある戦略について語られている。たとえば、&amp;rdquo;やればやるほどいい&amp;rdquo;という戦略の代わりに、&amp;rdquo;収穫逓減の利用&amp;rdquo;をおすすめしている。ある段階から効果が薄れ始めることを&amp;rdquo;収穫逓減&amp;rdquo;と呼ぶのだが、一つのことに時間をかけても次第に効果は薄れるので、効果が薄れ始めたら別の箇所の品質を上げるのだ。&lt;/p&gt;

&lt;p&gt;たとえば、ソフトウェア開発ではバグのないプログラムがよいとされるのだが、バグを100%取り除くことはできない。これ以上やっても重大なバグがでないと見なした時点で、別の箇所（UIや速度など）に取りかかった方が顧客の満足度は上がるはずだ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;とりあえず読み終えただけなのだが、「完璧主義をやめよう、手放そう、もっと適当に生きよう」という本がほとんどだった中、やめなくてもいいしやめてもいい、苦しいなら戦略を変えればいいという選択肢ができたことがよかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://books.cccmh.co.jp/list/detail/1227/&#34;&gt;がんばりすぎるあなたへ | CCCメディアハウス - 書籍&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015 10 04</title>
      <link>http://log.deprode.net/logs/2015-10-04/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-10-04/</guid>
      <description>

&lt;h2 id=&#34;がんばりすぎるあなたへ&#34;&gt;がんばりすぎるあなたへ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://books.cccmh.co.jp/list/detail/1227/&#34;&gt;がんばりすぎるあなたへ | CCCメディアハウス - 書籍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;途中まで読んだけど良本。完璧主義で苦しんでいる人たちに、完璧主義のままで楽になる方法を教えてくれる本。完璧主義には健全なものと不健全なものがあり、うまくいっている部分を把握し、強化することで解決へと導く。&lt;/p&gt;

&lt;p&gt;本書は二部構成になっている。第一部は、完璧主義の種類や自己分析など。第二部は、健全な完璧主義にするための方法を扱っている。&lt;/p&gt;

&lt;p&gt;著者は強迫性障害や不安神経症を専門とする臨床心理学者、セラピスト。自分自身も完璧主義で、それを克服すべくいろいろ研究した。また、同じ苦しみを持つ患者たちの治療も行っている。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最近とにかくダメで、途中までやるけど投げ出してしまうことが多い。前回の掲示板も、完璧なプログラムを作ろうと思っていろいろやっていたが、結局時間がかかる割にあまりいいものはできなかった。テストも手動だし。&lt;/p&gt;

&lt;p&gt;私の見ている世界が、背伸びした人たちの世界なのかもしれないし、うわべを取り繕った世界なのかもしれない。だから相手に対しても見劣りしないようにやっているけど、それでも及第点すらあげられないレベルに感じる。&lt;/p&gt;

&lt;p&gt;そんなんだから自信もなくなるし、相手に対しても強く出ることができないばかりか、必要以上にへりくだってしまう。このままでは苦しむばかりでよくないと思ったので本書を手に取った。&lt;/p&gt;

&lt;p&gt;読み始めてみると、私のことが書いてあった。痛いところを突いてくるな、という部分がとにかく多くて、読み進めるのがつらかった。が、&amp;rdquo;良薬口に苦し&amp;rdquo;だと思って読み進めている。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Bot on log </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://log.deprode.net/tags/bot/</link>
    
    
    <copyright>deprode</copyright>
    <updated>Wed, 27 May 2015 20:45:09 JST</updated>
    
    <item>
      <title>2015 05 27</title>
      <link>http://log.deprode.net/logs/2015-05-27/</link>
      <pubDate>Wed, 27 May 2015 20:45:09 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-05-27/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;恐怖駆動開発

&lt;ul&gt;
&lt;li&gt;モチベーションを何で保つのか。ごほうび、向上心、情熱、恐怖、絶望、怒り、物語を読むといろいろなモデルがある。&lt;/li&gt;
&lt;li&gt;恐怖はもっとも原始的な感情だ。それ故に、危険にあったときと同様に体が臨戦態勢に入る。集中力が増し、活動的になる。&lt;/li&gt;
&lt;li&gt;一方で、長期間恐怖にさらされることを、人体は想定していない。ストレスが長期間かかれば、それだけ体をむしばんでいく。&lt;/li&gt;
&lt;li&gt;だから、ここぞというとき以外は恐怖で人を縛ってはいけない。いつ怒られるかわからない状況が常に支配していれば、ここぞというときに力が発揮できなくなる。&lt;/li&gt;
&lt;li&gt;そのため、恐怖以外の感情を大切にすることだ。外発的であろうと内発的であろうと、種火を消さぬように、無理せずにやっていくことが重要だ。&lt;/li&gt;
&lt;li&gt;あなたが他人のジョークを見抜けないように、他人もまた、あなたの傷ついた心を見抜くことはできないのだ。気にしないことができないのなら、気になったことを紙に書いて破り捨てよう。&lt;/li&gt;
&lt;li&gt;最近、見放される恐怖からいろいろなことをやっていたので、自戒を込めて書いた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Node.jsの例外処理

&lt;ul&gt;
&lt;li&gt;普通に考えれば、throwしたものをtry-catchで処理して終わりなんだけど、非同期処理（setTimeout）が入ると、非同期処理内部でthrowしたときに普通に処理すると例外をとらえられなくて怒られる。&lt;/li&gt;
&lt;li&gt;今回は、例外（というかエラー処理）を非同期処理内部で処理できたので、それでよしとした。&lt;/li&gt;
&lt;li&gt;本来は、Domainを使うみたい。でも、よくわかってない。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/domain.html&#34;&gt;Domain Node.js v0.12.4 Manual &amp;amp; Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tumblr_bot

&lt;ul&gt;
&lt;li&gt;作った。とりあえず、テスト用で6時間ごとcronで呼び出してる。&lt;/li&gt;
&lt;li&gt;Tumblrにある、Twitterを引用している投稿を収集。収集したものの中から重複したものをTwitterでRetweetする仕組み。&lt;/li&gt;
&lt;li&gt;ちょっと試したけど、もっと多くの人から収集した方がよさそう。

&lt;ul&gt;
&lt;li&gt;ここでcineraria氏のデータが役に立つ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cineraria.tumblr.com/post/25754147910/tumblr-reblog&#34;&gt;cineraria, tumblrアカウントのクラスタ分けをしてみました。クラスタ分けの方法は、誰が誰からReblogしたか&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;扇風機出した。暑すぎるでしょう。

&lt;ul&gt;
&lt;li&gt;インド45度だって。信じられない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2015 05 26</title>
      <link>http://log.deprode.net/logs/2015-05-26/</link>
      <pubDate>Tue, 26 May 2015 23:32:12 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2015-05-26/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;async.js→Q

&lt;ul&gt;
&lt;li&gt;ダメだったっぽい。複数の非同期処理の終了を待ち受けて、完了時に何かする処理を書こうとしたけど、よくわからなかった。&lt;/li&gt;
&lt;li&gt;たとえるなら、手分けして買い物して、終わったら集合して買ったものとレシートを集める、みたいな処理。&lt;/li&gt;
&lt;li&gt;普通は処理が一つなので、paralellとかで非同期処理して終わったらcallbackで終了処理して、みたいな処理になる。&lt;/li&gt;
&lt;li&gt;非同期処理が複数の場合、実行することはできたけど終了時の非同期処理がよくわからなかった。whilst/doWhilst使って条件で〜〜みたいなのはできるけど、finish処理を行うのが難しい。（waterfallみたいなfinishFnがない）&lt;/li&gt;
&lt;li&gt;結局、非同期処理が全部終わったか変数・フラグで判定してcallback呼ぶ処理にしたけど、これでいいのかよくわからない。&lt;/li&gt;
&lt;li&gt;QがいいよってStackoverflowに出てた。Promise使うみたい。

&lt;ul&gt;
&lt;li&gt;その下には、Bluebirdもいいって書いてあった。&lt;/li&gt;
&lt;li&gt;そして、この二つはすでにazuさんがJSer.infoで書いてあった。&lt;a href=&#34;http://jser.info/post/77696682011/es6-promises/&#34;&gt;あなたが読むべきJavaScript Promises - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;やっぱりJavaScriptPromiseの本を読んだ方がいいのかもしれない。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://azu.github.io/promises-book/&#34;&gt;JavaScript Promiseの本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;coとかでもいいと思う。Express作った人のPromiseライブラリ。koaと一緒に使うとcool。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;次からはasync.jsじゃなくて、coかQかBluebird使おう。

&lt;ul&gt;
&lt;li&gt;あ、でもPromiseわかってからじゃないとつらいのかな。なんとなくでしかわかってない。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tj/co&#34;&gt;tj/co&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/LightSpeedC/items/7980a6e790d6cb2d6dad&#34;&gt;[JavaScript] 非同期処理のコールバック地獄から抜け出す方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kriskowal/q&#34;&gt;kriskowal/q&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Awa_Dama/items/3f73ec4f5bf94bac2094&#34;&gt;node.js Q 使い方 メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/petkaantonov/bluebird&#34;&gt;petkaantonov/bluebird&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;coとかQとかググラビリティ低すぎでは。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tumblr_bot作成

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/tumblr.js&#34;&gt;tumblr.js&lt;/a&gt;を使った。&lt;/li&gt;
&lt;li&gt;途中なので結果は明日書く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install tumblr&lt;/code&gt;だとtumblr.js入らないので厳しい。&lt;/li&gt;
&lt;li&gt;tumblr.js使うとPosts読み込みがだいぶ楽にできたのでよかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;室温30度いったけど、エアコンがないので我慢するしかない。

&lt;ul&gt;
&lt;li&gt;早く扇風機出さねば。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
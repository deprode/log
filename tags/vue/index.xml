<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Vue on log </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://log.deprode.net/tags/vue/index.xml</link>
    
    
    <copyright>deprode</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>2016 01 14</title>
      <link>http://log.deprode.net/logs/2016-01-14/</link>
      <pubDate>Thu, 14 Jan 2016 21:40:07 JST</pubDate>
      
      <guid>http://log.deprode.net/logs/2016-01-14/</guid>
      <description>

&lt;h2 id=&#34;おととい作ったやつのフロントをvueで作り直した&#34;&gt;おととい作ったやつのフロントをVueで作り直した&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://deprode.net/log/logs/2016-01-12/&#34;&gt;Twitterから非公開TumblrにLikesをバックアップした&lt;/a&gt;」で作ったやつ、あまりにもコードが雑すぎてPHPの画面とロジックが分離できてないレベルだったので、&lt;a href=&#34;http://jp.vuejs.org/&#34;&gt;vue.js&lt;/a&gt;使ってみたかったこともあり、作り直した。&lt;/p&gt;

&lt;p&gt;vue.jsはMVCのうちViewに関する処理を行いやすくするライブラリで、それほど複雑なことをやるのでなければ使いやすいらしいので選んだ。というか、それ以外ほぼ知らず、「&lt;a href=&#34;http://jp.vuejs.org/guide/index.html&#34;&gt;はじめに&lt;/a&gt;」を前にやったことがある程度だった。&lt;/p&gt;

&lt;p&gt;使ってみたが、まだ終わってないけど、とりあえずいくつも画面があるわけではなく、一つの画面で読み込んだデータを表示するだけなので簡単だった。（コンポーネントを使った方がいいのかもしれないが、使わなかった。）&lt;a href=&#34;http://mithril-ja.js.org/index.html&#34;&gt;Mithril&lt;/a&gt;に比べるといろいろ覚えることが多いな、と思った。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;しかし、日本語ドキュメントが整備されているので、あまり外部のドキュメントやStackOverflowを参考にしなくてすんだ。ドキュメントが充実しているのはよい。特にvueは1.0以降とそれ以前でAPIが変化しており、公式ドキュメントに情報が集まりのは助かった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vue/releases/tag/1.0.0&#34;&gt;Release 1.0.0 Evangelion · vuejs/vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、PHPの構文をVueの構文に置き換えるのはかなり簡単だった。というか、&lt;code&gt;&amp;lt;?php echo $tweet-&amp;gt;id_str; ?&amp;gt;&lt;/code&gt;とかを、&lt;code&gt;{{ tweet.id_str }}&lt;/code&gt;とかに置き換えるだけでほぼオッケーで、部分部分で&lt;code&gt;v-if&lt;/code&gt;や&lt;code&gt;v-for&lt;/code&gt;を使うだけだった。情報の取得にvue-resorceは使わずに&lt;a href=&#34;https://github.com/github/fetch&#34;&gt;github/fetch&lt;/a&gt;を使ったけど、こういう柔軟にできるところもいいところだと思った。&lt;/p&gt;

&lt;p&gt;テキストのエスケープ処理は少し手こずった。出力時に自動でエスケープされるらしく、URLに自動でリンクを張ったり、&lt;code&gt;\n&lt;/code&gt;を&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;に置き換えてもエスケープされて文字列として出力された。なので、PHPでhtmlspecialcharsとnl2brをした後にvueではエスケープせずに出力するようにした。&lt;/p&gt;

&lt;p&gt;ルーティングはpage.jsを使ったが、よくわからなかった。とりあえず、URLを記録させるために使おうと思ったのだが、最終的にフォームから投稿でリダイレクト→ルーティングでツイート読込という処理にした。これが正しい使い方なのかわからない。&lt;/p&gt;

&lt;p&gt;まあ、とりあえずあと少し手直しすれば終わるところまで一日でいったのでよかった。あとはPHPの側をRESTにすれば、みたいなことを考えていて、本当に凝り性は損だと思った。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;mithrilは10個くらいのAPIを覚えればだいたい使えるので、ほとんどのFWは多くなるというジョーク。vueはいろいろ覚えることがある。学習コストはそこそこあるが、とりあえず使うところまでのコストは低い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>